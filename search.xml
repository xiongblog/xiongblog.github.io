<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单的elk实现</title>
      <link href="/2023/04/17/%E5%90%8E%E7%AB%AF/%E7%AE%80%E5%8D%95%E7%9A%84elk%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/17/%E5%90%8E%E7%AB%AF/%E7%AE%80%E5%8D%95%E7%9A%84elk%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>软件的版本必须一致，否则会出现意想不到的问题</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/downloads/past-releases</code></pre><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><h3 id="安装-es"><a href="#安装-es" class="headerlink" title="安装 es"></a>安装 es</h3><ul><li><p>下载解压</p></li><li><p>修改配置文件【elasticsearch.yml】</p><pre class=" language-yml"><code class="language-yml"># 免认证xpack.security.enabled:falsexpack.security.enrollment.enabled:falsexpack.security.transport.ssl.enabled:false# 解决跨域（添加）http.cors.enabled: truehttp.cors.allow-origin: "*"ingest.geoip.downloader.enabled: false</code></pre></li><li><p>启动.&#x2F;bin</p><pre class=" language-sh"><code class="language-sh">elasticsearch.bat</code></pre></li><li><p>显示以下则证明成功</p><pre class=" language-txt"><code class="language-txt">[2023-02-13T19:23:09,160][INFO ][o.e.c.r.a.AllocationService] [XIONG] current.health="GREEN" message="Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[.security-7][0]]])." previous.health="RED" reason="shards started [[.security-7][0]]"[2023-02-13T19:23:09,355][INFO ][o.e.i.g.DatabaseNodeService] [XIONG] successfully loaded geoip database file [GeoLite2-Country.mmdb][2023-02-13T19:23:09,426][INFO ][o.e.i.g.DatabaseNodeService] [XIONG] successfully loaded geoip database file [GeoLite2-ASN.mmdb][2023-02-13T19:23:10,398][INFO ][o.e.i.g.DatabaseNodeService] [XIONG] successfully loaded geoip database file [GeoLite2-City.mmdb]</code></pre></li><li><p>测试</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:9200/</code></pre><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"XIONG"</span><span class="token punctuation">,</span>    <span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>    <span class="token property">"cluster_uuid"</span><span class="token operator">:</span> <span class="token string">"a65wohquR1We8Y7jDo3UMA"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"number"</span><span class="token operator">:</span> <span class="token string">"8.6.1"</span><span class="token punctuation">,</span>        <span class="token property">"build_flavor"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"build_type"</span><span class="token operator">:</span> <span class="token string">"zip"</span><span class="token punctuation">,</span>        <span class="token property">"build_hash"</span><span class="token operator">:</span> <span class="token string">"180c9830da956993e59e2cd70eb32b5e383ea42c"</span><span class="token punctuation">,</span>        <span class="token property">"build_date"</span><span class="token operator">:</span> <span class="token string">"2023-01-24T21:35:11.506992272Z"</span><span class="token punctuation">,</span>        <span class="token property">"build_snapshot"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"lucene_version"</span><span class="token operator">:</span> <span class="token string">"9.4.2"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_wire_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>        <span class="token property">"minimum_index_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.0.0"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"tagline"</span><span class="token operator">:</span> <span class="token string">"You Know, for Search"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="安装-ElasticSearch-head"><a href="#安装-ElasticSearch-head" class="headerlink" title="安装 ElasticSearch-head"></a>安装 ElasticSearch-head</h3><ul><li><p>安装node.js</p></li><li><p>安装grunt</p><pre class=" language-sh"><code class="language-sh">npm install grunt -g</code></pre></li><li><p>下载包</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//github.com/mobz/elasticsearch-head</code></pre></li><li><p>安装</p><p>解决跨域</p><pre class=" language-sh"><code class="language-sh"># 解决跨域http.cors.enabled: truehttp.cors.allow-origin: "*"</code></pre><pre class=" language-sh"><code class="language-sh">cd elasticsearch-headnpm installnpm run starthttp://127.0.0.1:9100/</code></pre></li></ul><h3 id="安装-kibana"><a href="#安装-kibana" class="headerlink" title="安装 kibana"></a>安装 kibana</h3><ul><li><p>下载</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/cn/downloads/past-releases</code></pre></li><li><p>修改配置文件 config.kibana.yml</p><pre class=" language-sh"><code class="language-sh"># 更多配置信息，详见 https://www.elastic.co/guide/cn/kibana/current/settings.html    server.port: 5601    server.host: "127.0.0.1"    server.name: lqz    elasticsearch.hosts: ["http://localhost:9200/"]</code></pre></li><li><p>启动</p><pre class=" language-sh"><code class="language-sh">./bin/kibana</code></pre></li><li><p>访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1:5601/app/kibana</code></pre></li><li><p>查询页面</p><p><img src="D:/data/gitData/notes/notes/01-%E7%9F%A5%E8%AF%86%E5%BA%93/03-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/es-elasticsearch/es-2023-02-13.assets/image-20230303093358454.png" alt="image-20230303093358454"></p></li></ul><h3 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h3><ul><li><p>下载(可能需要梯子)</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/cn/downloads/past-releases#logstash</code></pre></li><li><p>修改配置文件</p><p>.&#x2F;config&#x2F;logstash-sample.conf</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Sample Logstash configuration for creating a simple</span><span class="token comment" spellcheck="true"># Beats -> Logstash -> Elasticsearch pipeline.</span>input &amp;<span class="token comment" spellcheck="true">#123;</span>  tcp &amp;<span class="token comment" spellcheck="true">#123;</span>    mode =<span class="token punctuation">></span> "server"    host =<span class="token punctuation">></span> "localhost"    port =<span class="token punctuation">></span> 5044    codec =<span class="token punctuation">></span> json_lines  &amp;<span class="token comment" spellcheck="true">#125;</span>&amp;<span class="token comment" spellcheck="true">#125;</span>output &amp;<span class="token comment" spellcheck="true">#123;</span>  elasticsearch &amp;<span class="token comment" spellcheck="true">#123;</span>    hosts =<span class="token punctuation">></span> "localhost<span class="token punctuation">:</span>9200"    index =<span class="token punctuation">></span> "springboot<span class="token punctuation">-</span>logstash<span class="token punctuation">-</span>%&amp;<span class="token comment" spellcheck="true">#123;+YYYY.MM.dd&amp;#125;"</span>  &amp;<span class="token comment" spellcheck="true">#125;</span>&amp;<span class="token comment" spellcheck="true">#125;</span></code></pre></li><li><p>启动</p><p>cd .&#x2F;bin</p><pre class=" language-sh"><code class="language-sh">logstash.bat -f D:\server\logstash-8.6.1-windows-x86_64\logstash-8.6.1\config\logstash-sample.conf</code></pre></li></ul><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><h3 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h3><ul><li><p>下载</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.elastic.co/cn/downloads/elasticsearch</code></pre></li></ul><h3 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h3><ul><li>略</li></ul><h3 id="安装logstash-1"><a href="#安装logstash-1" class="headerlink" title="安装logstash"></a>安装logstash</h3><ul><li>略</li></ul><h2 id="java将日志输入到logstash"><a href="#java将日志输入到logstash" class="headerlink" title="java将日志输入到logstash"></a>java将日志输入到logstash</h2><ul><li><p>创建springboot项目</p></li><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.logstash.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logstash-logback-encoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>logback-spring.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--该日志将日志级别不同的log信息保存到不同的文件中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springAppName<span class="token punctuation">"</span></span>                    <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring.application.name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志在工程中的输出位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;BUILD_FOLDER:-build&amp;#125;/$&amp;#123;springAppName&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台的日志输出样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%clr(%d&amp;#123;yyyy-MM-dd HH:mm:ss.SSS&amp;#125;)&amp;#123;faint&amp;#125; %clr($&amp;#123;LOG_LEVEL_PATTERN:-%5p&amp;#125;) %clr($&amp;#123;PID:- &amp;#125;)&amp;#123;magenta&amp;#125; %clr(---)&amp;#123;faint&amp;#125; %clr([%15.15t])&amp;#123;faint&amp;#125; %m%n$&amp;#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志输出编码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>CONSOLE_LOG_PATTERN<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>utf8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 为logstash输出的JSON格式的Appender --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logstash<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net.logstash.logback.appender.LogstashTcpSocketAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>destination</span><span class="token punctuation">></span></span>127.0.0.1:5044<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>destination</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志输出编码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>providers</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timestamp</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeZone</span><span class="token punctuation">></span></span>UTC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeZone</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timestamp</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                        <span class="token entity" title="&#123;">&amp;#123;</span>                        "severity": "%level",                        "service": "$<span class="token entity" title="&#123;">&amp;#123;</span>springAppName:-<span class="token entity" title="&#125;">&amp;#125;</span>",                        "trace": "%X<span class="token entity" title="&#123;">&amp;#123;</span>X-B3-TraceId:-<span class="token entity" title="&#125;">&amp;#125;</span>",                        "span": "%X<span class="token entity" title="&#123;">&amp;#123;</span>X-B3-SpanId:-<span class="token entity" title="&#125;">&amp;#125;</span>",                        "exportable": "%X<span class="token entity" title="&#123;">&amp;#123;</span>X-Span-Export:-<span class="token entity" title="&#125;">&amp;#125;</span>",                        "pid": "$<span class="token entity" title="&#123;">&amp;#123;</span>PID:-<span class="token entity" title="&#125;">&amp;#125;</span>",                        "thread": "%thread",                        "class": "%logger<span class="token entity" title="&#123;">&amp;#123;</span>40<span class="token entity" title="&#125;">&amp;#125;</span>",                        "rest": "%message"                        <span class="token entity" title="&#125;">&amp;#125;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>providers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志输出级别 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logstash<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动springboot项目</p></li><li><p>使用kibana查询 导入到 es中所有的index</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1:5601/app/dev_tools#/console</code></pre><p><img src="D:/data/gitData/notes/notes/01-%E7%9F%A5%E8%AF%86%E5%BA%93/03-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/es-elasticsearch/es-2023-02-13.assets/image-20230303105339877.png" alt="image-20230303105339877"></p></li></ul><h2 id="java-查询es中的日志"><a href="#java-查询es中的日志" class="headerlink" title="java 查询es中的日志"></a>java 查询es中的日志</h2><ul><li><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>application.yml</p><pre class=" language-yml"><code class="language-yml">server:    port: 8080spring:    elasticsearch:        rest:            uris: localhost:9200            username:            password:</code></pre></li><li><p>service.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pj<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MatchAllQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span>FieldSortBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span>SortOrder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>PageImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>PageRequest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Pageable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ElasticsearchRestTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>SearchHit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>SearchHits<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span>NativeSearchQuery<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span>NativeSearchQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogServiceImpl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建查询条件(搜索全部)</span>        MatchAllQueryBuilder queryBuilder1 <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分页</span>        Pageable pageable <span class="token operator">=</span> PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序</span>        <span class="token comment" spellcheck="true">//FieldSortBuilder balance = new FieldSortBuilder("pid").order(SortOrder.DESC);</span>        <span class="token comment" spellcheck="true">// 执行查询</span>        NativeSearchQuery query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span>queryBuilder1<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//.withSort(balance)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchHits<span class="token operator">&lt;</span>Log<span class="token operator">></span> searchHits <span class="token operator">=</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Log<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装page对象</span>        List<span class="token operator">&lt;</span>Log<span class="token operator">></span> accounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit<span class="token operator">&lt;</span>Log<span class="token operator">></span> hit <span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            accounts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>Log<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>accounts<span class="token punctuation">,</span>pageable<span class="token punctuation">,</span>searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出分页对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2023/04/17/%E5%91%A8%E8%BE%B9/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2023/04/17/%E5%91%A8%E8%BE%B9/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><h4 id="一个具有公网ip的主机"><a href="#一个具有公网ip的主机" class="headerlink" title="一个具有公网ip的主机"></a>一个具有公网ip的主机</h4><h4 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h4><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//open.dingtalk.com/document/resourcedownload/alibaba-cloud-frp-intranet-penetration-tool</code></pre><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//gofrp.org/docs/setup/</code></pre><h3 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h3><ul><li>安装</li></ul><pre class=" language-sh"><code class="language-sh">wget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gztar -xvf frp_0.38.0_linux_amd64.tar.gz mkdir /usr/local/frpmv frp_0.38.0_linux_amd64/* /usr/local/frp/</code></pre><ul><li>配置</li></ul><pre class=" language-sh"><code class="language-sh">cd /usr/local/frpvi frps.ini</code></pre><pre class=" language-properties"><code class="language-properties">[common]<span class="token attr-name">bind_port</span> <span class="token punctuation">=</span> <span class="token attr-value">7000</span><span class="token attr-name">vhost_http_port</span> <span class="token punctuation">=</span> <span class="token attr-value">80 #监听http的端口</span><span class="token attr-name">[web-http]</span> <span class="token attr-name">listen_port</span><span class="token punctuation">=</span><span class="token attr-value">80 # 监听http的端口</span><span class="token comment" spellcheck="true"># 尽量不要再配置文件中写注释……</span></code></pre><ul><li>启动(非控制台)</li></ul><pre class=" language-sh"><code class="language-sh">./frps -c ./frps.ini</code></pre><ul><li>静寂启动</li></ul><pre class=" language-SH"><code class="language-SH"># yumyum install systemd# aptapt install systemd# 新增脚本 frp_0.48.0_linux_amd64vim /etc/systemd/system/frps.service</code></pre><pre class=" language-properties"><code class="language-properties">[Unit]<span class="token comment" spellcheck="true"># 服务名称，可自定义</span><span class="token attr-name">Description</span> <span class="token punctuation">=</span> <span class="token attr-value">frp server</span><span class="token attr-name">After</span> <span class="token punctuation">=</span> <span class="token attr-value">network.target syslog.target</span><span class="token attr-name">Wants</span> <span class="token punctuation">=</span> <span class="token attr-value">network.target</span>[Service]<span class="token attr-name">Type</span> <span class="token punctuation">=</span> <span class="token attr-value">simple</span><span class="token comment" spellcheck="true"># 启动frps的命令，需修改为您的frps的安装路径</span><span class="token attr-name">ExecStart</span> <span class="token punctuation">=</span> <span class="token attr-value">/usr/local/frp/frps -c /usr/local/frp/frps.ini</span>[Install]<span class="token attr-name">WantedBy</span> <span class="token punctuation">=</span> <span class="token attr-value">multi-user.target</span></code></pre><ul><li>启动命令</li></ul><pre class=" language-sh"><code class="language-sh"># 启动frpsystemctl start frps# 停止frpsystemctl stop frps# 重启frpsystemctl restart frps# 查看frp状态systemctl status frps</code></pre><ul><li>设置开机启动</li></ul><pre class=" language-sh"><code class="language-sh">systemctl enable frps</code></pre><h3 id="搭建客户端"><a href="#搭建客户端" class="headerlink" title="搭建客户端"></a>搭建客户端</h3><h4 id="windows-http"><a href="#windows-http" class="headerlink" title="windows http"></a>windows http</h4><ul><li><p>下载</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//github.com/fatedier/frp/releases/tag/v0.48.0</code></pre></li><li><p>修改配置文件</p><pre class=" language-properties"><code class="language-properties">[common]<span class="token attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token attr-value">myfox.fun</span><span class="token attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token attr-value">7000</span>[web-http]<span class="token attr-name">type</span> <span class="token punctuation">=</span> <span class="token attr-value">http</span><span class="token attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token attr-value">9081 </span><span class="token attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token attr-value">80 </span><span class="token attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1</span><span class="token attr-name">custom_domains</span> <span class="token punctuation">=</span> <span class="token attr-value">myfox.fun</span><span class="token comment" spellcheck="true">#尽量不要在配置文件中写注释</span></code></pre></li><li><p>访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//myfox.fun/api-interfaces/services</code></pre></li></ul><h4 id="linux-ssh"><a href="#linux-ssh" class="headerlink" title="linux ssh"></a>linux ssh</h4><ul><li><p>下载</p><p>frp_0.48.0_linux_amd64.tar.gz</p></li><li><p>修改配置文件</p><pre class=" language-properties"><code class="language-properties">[common]<span class="token attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token attr-value">myfox.fun</span><span class="token attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token attr-value">7000</span>[ssh]<span class="token attr-name">type</span> <span class="token punctuation">=</span> <span class="token attr-value">tcp</span><span class="token attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1</span><span class="token attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token attr-value">22</span><span class="token attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token attr-value">6000</span></code></pre></li><li><p>启动</p><pre class=" language-sh"><code class="language-sh">./frpc -c ./frpc.ini</code></pre></li><li><p>访问</p><p><img src="https://raw.githubusercontent.com/xiongblog/images/main/blogimage-20230403155723477.png" alt="image-20230403155723477"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 周边 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的搭建与使用</title>
      <link href="/2023/04/17/%E5%91%A8%E8%BE%B9/redis%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/17/%E5%91%A8%E8%BE%B9/redis%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>使用华为镜像</li></ul><pre class=" language-sh"><code class="language-sh">wget https://repo.huaweicloud.com/redis/redis-6.2.5.tar.gz</code></pre><ul><li>安装</li></ul><pre class=" language-sh"><code class="language-sh">tar -zxvf redis-6.2.5.tar.gzcd redis-6.2.5/make MALLOC=libccd src && make install</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>修改配置</li></ul><pre class=" language-sh"><code class="language-sh">cd ..vim redis.conf#注释 这一行重新启动redis即可#bind 127.0.0.1#设置安全密码requirepass 123456# 静寂启动daemonize yes</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li>启动</li></ul><pre class=" language-sh"><code class="language-sh">cd src/./redis-server /opt/redis/redis-6.2.5/redis.conf# 查看是否启动ps -aux | grep redis</code></pre><ul><li>设置开机启动</li></ul><pre class=" language-sh"><code class="language-sh">cd /etcmkdir rediscd rediscp /opt/redis/redis-6.2.5/redis.conf /etc/redis/6379.confcp /opt/redis/redis-6.2.5/utils/redis_init_script /etc/init.d/redisdcd /etc/init.dchkconfig redisd on# 以后启动方式可以用这种service redisd startservice redisd stop</code></pre><h1 id="配置持久化"><a href="#配置持久化" class="headerlink" title="配置持久化"></a>配置持久化</h1><h2 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h2><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.cnblogs.com/kismetv/p/9137897.html</code></pre><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><pre class=" language-sh"><code class="language-sh">#进入客户端./redis-cli #执行命令127.0.0.1:6379> save</code></pre><h3 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h3><h4 id="修改redis-conf配置文件中的"><a href="#修改redis-conf配置文件中的" class="headerlink" title="修改redis.conf配置文件中的"></a>修改redis.conf配置文件中的</h4><pre class=" language-sh"><code class="language-sh">#   save ""save 900 1save 300 10save 60 10000</code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>其中save 900 1的含义是：当时间到900秒时，如果redis数据发生了至少1次变化，则执行bgsave；save 300 10和save 60 10000同理。当三个save条件满足任意一个时，都会引起bgsave的调用。</p><p>在主从复制场景下，如果从节点执行全量复制操作，则主节点会执行bgsave命令，并将rdb文件发送给从节点</p><p>执行shutdown命令时，自动执行rdb持久化</p><h3 id="存储路径"><a href="#存储路径" class="headerlink" title="存储路径"></a>存储路径</h3><h4 id="修改redis-conf"><a href="#修改redis-conf" class="headerlink" title="修改redis.conf"></a>修改redis.conf</h4><p>名称</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># The filename where to dump the DB</span><span class="token comment" spellcheck="true">#此处为存储位置，dir配置指定目录，dbfilename指定文件名。默认是Redis根目录下的dump.rdb文件。</span><span class="token attr-name">dbfilename</span> <span class="token attr-value">dump.rdb </span><span class="token comment" spellcheck="true"># Remove RDB files used by replication in instances without persistence</span></code></pre><p>路径</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Note that you must specify a directory here, not a file name.</span><span class="token attr-name">dir</span> <span class="token attr-value">./</span></code></pre><h4 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h4><p>RDB文件的载入工作是在服务器启动时自动执行的，并没有专门的命令。但是由于AOF的优先级更高，因此当AOF开启时，Redis会优先载入AOF文件来恢复数据；只有当AOF关闭时，才会在Redis服务器启动时检测RDB文件，并自动载入。服务器载入RDB文件期间处于阻塞状态，直到载入完成为止。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>Redis服务器默认开启RDB，关闭AOF；要开启AOF，需要在配置文件中配置。</p><p>当AOF开启时，Redis启动时会优先载入AOF文件来恢复数据；只有当AOF关闭时，才会载入RDB文件恢复数据。</p><p>当AOF开启，但AOF文件不存在时，即使RDB文件存在也不会加载(更早的一些版本可能会加载，但3.0不会)</p><p>常用配置，redis.conf</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">-</span> <span class="token attr-value">appendonly no：是否开启AOF</span><span class="token attr-name">-</span> <span class="token attr-value">appendfilename "appendonly.aof"：AOF文件名</span><span class="token attr-name">-</span> <span class="token attr-value">dir ./：RDB文件和AOF文件所在目录</span><span class="token attr-name">-</span> <span class="token attr-value">appendfsync everysec：fsync持久化策略</span><span class="token attr-name">-</span> <span class="token attr-value">no-appendfsync-on-rewrite no：AOF重写期间是否禁止fsync；如果开启该选项，可以减轻文件重写时CPU和硬盘的负载（尤其是硬盘），但是可能会丢失AOF重写期间的数据；需要在负载和安全性之间进行平衡</span><span class="token attr-name">-</span> <span class="token attr-value">auto-aof-rewrite-percentage 100：文件重写触发条件之一</span><span class="token attr-name">-</span> <span class="token attr-value">auto-aof-rewrite-min-size 64mb：文件重写触发提交之一</span><span class="token attr-name">-</span> <span class="token attr-value">aof-load-truncated yes：如果AOF文件结尾损坏，Redis启动时是否仍载入AOF文件</span></code></pre><h1 id="集群的搭建"><a href="#集群的搭建" class="headerlink" title="集群的搭建"></a>集群的搭建</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>Redis集群至少需要3个节点，因为投票容错机制要求超过半数节点认为某个节点挂了该节点才是挂了，所以2个节点无法构成集群。<br>要保证集群的高可用，需要每个节点都有从节点，也就是备份节点，所以Redis集群至少需要6台服务器。因为我没有那么多服务器，也启动不了那么多虚拟机，所在这里搭建的是伪分布式集群，即一台服务器虚拟运行6个redis实例，修改端口号为（7001-7006），当然实际生产环境的Redis集群搭建和这里是一样的。</p><p>redis安装过程请看当前目录下的过程</p><h3 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h3><h4 id="1、创建文件夹保存redis节点"><a href="#1、创建文件夹保存redis节点" class="headerlink" title="1、创建文件夹保存redis节点"></a>1、创建文件夹保存redis节点</h4><pre class=" language-sh"><code class="language-sh">mkdir redis-cluste</code></pre><h4 id="2-复制配置文件"><a href="#2-复制配置文件" class="headerlink" title="2.复制配置文件"></a>2.复制配置文件</h4><pre class=" language-sh"><code class="language-sh">mkdir /usr/local/redis-cluste/redis01cp -r /usr/local/redis/bin/ /usr/local/redis-cluste/redis01/cp -r /usr/local/redis/etc/* /usr/local/redis-cluste/redis01/bin/#删除无用代码rm -rf dump.rdb</code></pre><p><strong>修改后的文件目录</strong></p><pre class=" language-sh"><code class="language-sh">nodes.confredis-benchmarkredis-check-aofredis-check-rdbredis-cliredis.confredis-sentinel -> redis-serverredis-server</code></pre><h4 id="3、修改端口号"><a href="#3、修改端口号" class="headerlink" title="3、修改端口号"></a>3、修改端口号</h4><pre class=" language-sh"><code class="language-sh">vim redis.conf </code></pre><p>修改为</p><pre class=" language-sh"><code class="language-sh">port 6379  ->  port 7001# cluster-enabled yes  ->  cluster-enabled yes(去掉注释)</code></pre><h4 id="4、复制节点"><a href="#4、复制节点" class="headerlink" title="4、复制节点"></a>4、复制节点</h4><p>复制文件夹redis01为redis01至redis07</p><p>逐个修改配置文件的端口号</p><pre class=" language-sh"><code class="language-sh">cp -r  redis01 redis02</code></pre><p>启动关闭redis</p><pre class=" language-sh"><code class="language-sh">在配置文件目录下/usr/local/redis-cluste/redis01/bin./redis-server redis.confredis-cli -p 7001 shutdown</code></pre><h4 id="5、制作shell文件，快速启动"><a href="#5、制作shell文件，快速启动" class="headerlink" title="5、制作shell文件，快速启动"></a>5、制作shell文件，快速启动</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashcd  /usr/local/redis-cluste/redis01/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis02/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis03/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis04/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis05/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis06/bin./redis-server ./redis.confcd  /usr/local/redis-cluste/redis07/bin./redis-server ./redis.conf</code></pre><h6 id="执行权限"><a href="#执行权限" class="headerlink" title="执行权限"></a>执行权限</h6><pre class=" language-sh"><code class="language-sh">chmod 777 ./start.sh</code></pre><h6 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h6><p>bash: .&#x2F;start.sh: &#x2F;bin&#x2F;bash　^M: 坏的解释器: 没有那个文件或目录</p><pre class=" language-shell"><code class="language-shell">sed -i 's/\r$//' start.sh</code></pre><h6 id="执行后查看端口号"><a href="#执行后查看端口号" class="headerlink" title="执行后查看端口号"></a>执行后查看端口号</h6><pre class=" language-sh"><code class="language-sh">netstat -lntpps aux|grep redis</code></pre><h4 id="6、制作shell文件，快速关闭"><a href="#6、制作shell文件，快速关闭" class="headerlink" title="6、制作shell文件，快速关闭"></a>6、制作shell文件，快速关闭</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashredis-cli -p 7001 shutdownredis-cli -p 7002 shutdownredis-cli -p 7003 shutdownredis-cli -p 7004 shutdownredis-cli -p 7005 shutdownredis-cli -p 7006 shutdownredis-cli -p 7007 shutdown</code></pre><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>至此6个redis节点启动成功（准备七个作为备用），接下来正式开启搭建集群，以上都是准备条件。大家不要觉得图片多看起来冗长所以觉得麻烦，其实以上步骤也就一句话的事情：创建6个redis实例（6个节点）并启动。<br>要搭建集群的话，需要使用一个工具（脚本文件），这个工具在redis解压文件的源代码里。因为这个工具是一个ruby脚本文件，所以这个工具的运行需要ruby的运行环境，就相当于java语言的运行需要在jvm上。所以需要安装ruby</p><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="1、安装ruby"><a href="#1、安装ruby" class="headerlink" title="1、安装ruby"></a>1、安装ruby</h4><pre class=" language-sh"><code class="language-sh">#这种方法版本太低，不推荐yum install ruby</code></pre><p><strong>卸载</strong></p><pre class=" language-sh"><code class="language-sh">yum erase ruby ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs</code></pre><p><strong>下载最新版本的ruby并且解压</strong></p><pre class=" language-sh"><code class="language-sh">#正常方法http://www.ruby-lang.org/zh_cn/documentation/installation/cd ruby-3.0.1./configuremakesudo make install# 启动位置指向ln -s /usr/local/bin/ruby /usr/bin/ruby#查看版本ruby -v说明默认情况下，Ruby 安装到 /usr/local 目录。如果想使用其他目录，可以把 --prefix=DIR 选项传给 ./configure 脚本。</code></pre><p>重装</p><pre class=" language-sh"><code class="language-sh">yum groupinstall "Development tools"yum erase ruby ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docsyum -y install zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel mysql-devel重复上述安装</code></pre><h4 id="2、安装gem"><a href="#2、安装gem" class="headerlink" title="2、安装gem"></a>2、安装gem</h4><p>然后需要把ruby相关的包安装到服务器，我这里用的是redis-3.0.0.gem，大家需要注意的是：redis的版本和ruby包的版本最好保持一致。<br>将Ruby包安装到服务器：需要先下载再安装</p><p>网上下载后放入服务器，然后安装</p><p>下载地址：<a href="https://rubygems.org/gems/redis/versions/4.2.5">https://rubygems.org/gems/redis/versions/4.2.5</a></p><h5 id="安装gem"><a href="#安装gem" class="headerlink" title="安装gem"></a>安装gem</h5><pre class=" language-sh"><code class="language-sh">gem install redis-4.2.5.gem </code></pre><p><strong>返回</strong></p><pre class=" language-sh"><code class="language-sh">Successfully installed redis-4.2.5Parsing documentation for redis-4.2.5Installing ri documentation for redis-4.2.5Done installing documentation for redis after 0 seconds1 gem installed</code></pre><h5 id="复制脚本工具"><a href="#复制脚本工具" class="headerlink" title="复制脚本工具"></a>复制脚本工具</h5><p><strong>说明</strong></p><p>上一步中已经把ruby工具所需要的运行环境和ruby包安装好了，接下来需要把这个ruby脚本工具复制到usr&#x2F;local&#x2F;redis-cluster目录下。那么这个ruby脚本工具在哪里呢？之前提到过，在redis解压文件的源代码里，即redis&#x2F;src目录下的redis-trib.rb文件</p><pre class=" language-sh"><code class="language-sh">cd /usr/local/redis-6.0.8/srccat redis-trib.rbcp ./redis-trib.rb /usr/local/redis-cluste/</code></pre><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><p>执行命令</p><pre class=" language-sh"><code class="language-sh">./redis-trib.rb create --replicas 1 192.168.116.133:7001 192.168.116.133:7002 192.168.116.133:7003 192.168.116.133:7004 192.168.116.133:7005 192.168.116.133:7006</code></pre><p>报错</p><p>WARNING: redis-trib.rb is not longer available!<br>You should use redis-cli instead.</p><p>原因</p><p>原本的命令.&#x2F;redis-trib.rb create –replicas 1 172.16.0.71:9001 172.16.0.71:9002 废弃了，提示改用redis-cli</p><p>重新执行</p><pre class=" language-sh"><code class="language-sh">cd /usr/local/redis-6.0.8/src/cp ./redis-cli /usr/local/redis-cluste/./redis-cli create --replicas 1 192.168.116.133:7001 192.168.116.133:7002 192.168.116.133:7003 192.168.116.133:7004 192.168.116.133:7005 192.168.116.133:7006</code></pre><p>报错</p><p>Could not connect to Redis at 127.0.0.1:6379: Connection refused</p><p>原因：主服务未打开</p><pre class=" language-sh"><code class="language-sh">cd /usr/local/redis./bin/redis-server ./etc/redis.conf cd /usr/local/redis-cluste/#启动./redis-cli --cluster create --cluster-replicas 1  192.168.116.133:7001 192.168.116.133:7002 192.168.116.133:7003 192.168.116.133:7004 192.168.116.133:7005 192.168.116.133:7006</code></pre><p><strong>返回</strong></p><blockquote><blockquote><blockquote><p>Performing hash slots allocation on 6 nodes…<br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 192.168.116.133:7005 to 192.168.116.133:7001<br>Adding replica 192.168.116.133:7006 to 192.168.116.133:7002<br>Adding replica 192.168.116.133:7004 to 192.168.116.133:7003<br>Trying to optimize slaves allocation for anti-affinity<br>[WARNING] Some slaves are in the same host as their master<br>M: 59d0924bc1755d5565033ce00707adc50e30945e 192.168.116.133:7001<br>slots:[0-5460] (5461 slots) master<br>M: 6bd1e3c097f5f6092e42db71807c7199bb6d5444 192.168.116.133:7002<br>slots:[5461-10922] (5462 slots) master<br>M: 77989ff4487a1a91ffe8ae77cd9e13450ded7a77 192.168.116.133:7003<br>slots:[10923-16383] (5461 slots) master<br>S: 8b6aaa5b64dda8e8edc05800f4cdd835ded8af4e 192.168.116.133:7004<br>replicates 59d0924bc1755d5565033ce00707adc50e30945e<br>S: 2230987188ffa0e393bc0f9948e68356c86141a1 192.168.116.133:7005<br>replicates 6bd1e3c097f5f6092e42db71807c7199bb6d5444<br>S: 83d8dba574db757b064f352b5561c3558e52493b 192.168.116.133:7006<br>replicates 77989ff4487a1a91ffe8ae77cd9e13450ded7a77<br>Can I set the above configuration? (type ‘yes’ to accept): yes<br>Nodes configuration updated<br>Assign a different config epoch to each node<br>Sending CLUSTER MEET messages to join the cluster<br>Waiting for the cluster to join</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>Performing Cluster Check (using node 192.168.116.133:7001)<br>M: 59d0924bc1755d5565033ce00707adc50e30945e 192.168.116.133:7001<br>slots:[0-5460] (5461 slots) master<br>1 additional replica(s)<br>M: 77989ff4487a1a91ffe8ae77cd9e13450ded7a77 192.168.116.133:7003<br>slots:[10923-16383] (5461 slots) master<br>1 additional replica(s)<br>S: 8b6aaa5b64dda8e8edc05800f4cdd835ded8af4e 192.168.116.133:7004<br>slots: (0 slots) slave<br>replicates 59d0924bc1755d5565033ce00707adc50e30945e<br>S: 83d8dba574db757b064f352b5561c3558e52493b 192.168.116.133:7006<br>slots: (0 slots) slave<br>replicates 77989ff4487a1a91ffe8ae77cd9e13450ded7a77<br>S: 2230987188ffa0e393bc0f9948e68356c86141a1 192.168.116.133:7005<br>slots: (0 slots) slave<br>replicates 6bd1e3c097f5f6092e42db71807c7199bb6d5444<br>M: 6bd1e3c097f5f6092e42db71807c7199bb6d5444 192.168.116.133:7002<br>slots:[5461-10922] (5462 slots) master<br>1 additional replica(s)<br>[OK] All nodes agree about slots configuration.<br>Check for open slots…<br>Check slots coverage…<br>[OK] All 16384 slots covered.</p></blockquote></blockquote></blockquote><p><strong>查看状态</strong></p><pre class=" language-sh"><code class="language-sh">redis-cli -c -p 7001 cluster info</code></pre><p><strong>测试</strong></p><pre class=" language-sh"><code class="language-sh">redis-cli -c -p 7001127.0.0.1:7001> set username mess1</code></pre><p><strong>返回</strong></p><pre class=" language-sh"><code class="language-sh">-> Redirected to slot [14315] located at 192.168.116.133:7003OK</code></pre><h2 id="集群的启动与关闭"><a href="#集群的启动与关闭" class="headerlink" title="集群的启动与关闭"></a>集群的启动与关闭</h2><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><pre class=" language-sh"><code class="language-sh">ps -ef | grep rediskill -9 10252 10257 10262 10267 10272 10294也可执行以下命令来关闭redis进程pkill -9 redis</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><strong>保留原来的数据：</strong><br>逐个关闭redis实例，再逐个的启动即可。</p><p><strong>丢弃原来的数据：</strong><br>关闭实例，清空实例中数据存放目录的所有内容，然后逐个启动实例，在任意一个实例上执行集群的创建命令即可,本质上就是创建一个新的集群<br>清空数据存储目录内容：</p><p><strong>手动管理</strong></p><pre class=" language-sh"><code class="language-sh">3、将 ip 和 port 所指定的节点添加到集群中CLUSTER MEET <ip> <port>4、从集群中移除 node_id 指定的节点CLUSTER FORGET <node_id>5、将当前节点设置为 node_id 指定的节点的从节点CLUSTER REPLICATE <node_id>6、将节点的配置文件保存到硬盘里面CLUSTER SAVECONFIG7、将一个或多个槽（slot）指派（assign）给当前节点CLUSTER ADDSLOTS <slot> [slot ...]8、移除一个或多个槽对当前节点的指派CLUSTER DELSLOTS <slot> [slot ...]9、 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点CLUSTER FLUSHSLOTS10、将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽>，然后再进行指派CLUSTER SETSLOT <slot> NODE <node_id>11、将本节点的槽 slot 迁移到 node_id 指定的节点中CLUSTER SETSLOT <slot> MIGRATING <node_id>12、从 node_id 指定的节点中导入槽 slot 到本节点CLUSTER SETSLOT <slot> IMPORTING <node_id>13、取消对槽 slot 的导入（import）或者迁移（migrate）CLUSTER SETSLOT <slot> STABLE14、计算键 key 应该被放置在哪个槽上CLUSTER KEYSLOT <key>15、返回槽 slot 目前包含的键值对数量CLUSTER COUNTKEYSINSLOT <slot>16、返回 count 个 slot 槽中的键CLUSTER GETKEYSINSLOT <slot> <count></code></pre><h2 id="springboot链接redis集群"><a href="#springboot链接redis集群" class="headerlink" title="springboot链接redis集群"></a>springboot链接redis集群</h2><p>创建一个简单的springboot项目（项目在备份中）</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#application:</span>    <span class="token comment" spellcheck="true">#name: redis-cluster</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.116.133<span class="token punctuation">:</span><span class="token number">7001</span><span class="token punctuation">,</span>192.168.116.133<span class="token punctuation">:</span><span class="token number">7002</span><span class="token punctuation">,</span>192.168.116.133<span class="token punctuation">:</span><span class="token number">7003</span><span class="token punctuation">,</span>192.168.116.133<span class="token punctuation">:</span><span class="token number">7004</span><span class="token punctuation">,</span>192.168.116.133<span class="token punctuation">:</span><span class="token number">7005</span><span class="token punctuation">,</span>192.168.116.133<span class="token punctuation">:</span><span class="token number">7006</span>      <span class="token key atrule">max-redirects</span><span class="token punctuation">:</span> <span class="token number">12  </span><span class="token comment" spellcheck="true">#重链接的最大数量</span><span class="token key atrule">redis</span><span class="token punctuation">:</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000 </span><span class="token comment" spellcheck="true">#客户端超时时间单位是毫秒 默认是2000</span>  <span class="token key atrule">maxIdle</span><span class="token punctuation">:</span> <span class="token number">300 </span><span class="token comment" spellcheck="true">#最大空闲数</span>  <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">1000 </span><span class="token comment" spellcheck="true">#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性</span>  <span class="token key atrule">maxWaitMillis</span><span class="token punctuation">:</span> <span class="token number">1000 </span><span class="token comment" spellcheck="true">#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span>  <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000 </span><span class="token comment" spellcheck="true">#连接的最小空闲时间 默认1800000毫秒(30分钟)</span>  <span class="token key atrule">numTestsPerEvictionRun</span><span class="token punctuation">:</span> <span class="token number">1024 </span><span class="token comment" spellcheck="true">#每次释放连接的最大数目,默认3</span>  <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">30000 </span><span class="token comment" spellcheck="true">#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span>  <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span>  <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#在空闲时检查有效性, 默认false</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456 </span><span class="token comment" spellcheck="true">#密码</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre><h3 id="配置类RedisClusterConfig"><a href="#配置类RedisClusterConfig" class="headerlink" title="配置类RedisClusterConfig"></a>配置类RedisClusterConfig</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisClusterConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisNode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisPassword<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPoolConfig<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClusterConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.redis.cluster.nodes&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String clusterNodes<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.redis.cluster.max-redirects&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxRedirects<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.password&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.timeout&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.maxIdle&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.maxTotal&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.maxWaitMillis&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxWaitMillis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.minEvictableIdleTimeMillis&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minEvictableIdleTimeMillis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.numTestsPerEvictionRun&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numTestsPerEvictionRun<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.timeBetweenEvictionRunsMillis&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeBetweenEvictionRunsMillis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.testOnBorrow&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> testOnBorrow<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;redis.testWhileIdle&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> testWhileIdle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Redis连接池的配置     *     * @return JedisPoolConfig     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JedisPoolConfig <span class="token function">getJedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大空闲数</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 连接池的最大数据库连接数</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大建立连接等待时间</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逐出连接的最小空闲时间 默认1800000毫秒(30分钟)</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinEvictableIdleTimeMillis</span><span class="token punctuation">(</span>minEvictableIdleTimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setNumTestsPerEvictionRun</span><span class="token punctuation">(</span>numTestsPerEvictionRun<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTimeBetweenEvictionRunsMillis</span><span class="token punctuation">(</span>timeBetweenEvictionRunsMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span>testOnBorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在空闲时检查有效性, 默认false</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTestWhileIdle</span><span class="token punctuation">(</span>testWhileIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jedisPoolConfig<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Redis集群的配置     *     * @return RedisClusterConfiguration     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisClusterConfiguration <span class="token function">redisClusterConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RedisClusterConfiguration redisClusterConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisClusterConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set&lt;RedisNode> clusterNodes</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> serverArray <span class="token operator">=</span> clusterNodes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>RedisNode<span class="token operator">></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>RedisNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ipPort <span class="token operator">:</span> serverArray<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> ipAndPort <span class="token operator">=</span> ipPort<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisNode</span><span class="token punctuation">(</span>ipAndPort<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ipAndPort<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setClusterNodes</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setMaxRedirects</span><span class="token punctuation">(</span>maxRedirects<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>RedisPassword<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisClusterConfiguration<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * redis连接工厂类     *     * @return JedisConnectionFactory     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JedisConnectionFactory <span class="token function">jedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 集群模式</span>        JedisConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token function">redisClusterConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getJedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实例化 RedisTemplate 对象     *     * @return RedisTemplate&lt;String, Object>     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Template初始化</span>        <span class="token function">initDomainRedisTemplate</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置数据存入 redis 的序列化方式 使用默认的序列化会导致key乱码     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDomainRedisTemplate</span><span class="token punctuation">(</span>RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启redis数据库事务的支持</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setEnableTransactionSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span><span class="token function">jedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to</span>        <span class="token comment" spellcheck="true">// String！</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// jackson序列化对象设置</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="测试类controller"><a href="#测试类controller" class="headerlink" title="测试类controller"></a>测试类controller</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author ：zhangYiXiong * @date ：Created in 2021/6/2 15:11 * @description： * @version: 1.0 */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String k <span class="token operator">=</span> <span class="token string">"springboot"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"hello world! 你好，世界"</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> template<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="redission"><a href="#redission" class="headerlink" title="redission"></a>redission</h1><h2 id="springboot整合redission"><a href="#springboot整合redission" class="headerlink" title="springboot整合redission"></a>springboot整合redission</h2><ul><li><p>pom</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--整合redission框架start--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.12.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--整合redission框架enc--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>yml配置</p><pre class=" language-yml"><code class="language-yml">spring:  #redisson配置,默认连接库0,无密码只配置连接地址即可  redis:    host: 127.0.0.1    database: 0    password:</code></pre></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>限流器的使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cyc<span class="token punctuation">.</span>redission<span class="token punctuation">.</span>n1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RRateLimiter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RateIntervalUnit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RateType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RedissonClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 限流器 * 1.先调用init方法生成5个令牌 * 2.通过该限流器的名称rateLimiter来获取令牌limiter.tryAcquire() * 3.谁抢到,谁先执行,否则返回提示信息,可以用于秒杀场景 * */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/limiter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiterTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedissonClient redissonClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化限流器</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/init"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RRateLimiter limiter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getRateLimiter</span><span class="token punctuation">(</span><span class="token string">"rateLimiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        limiter<span class="token punctuation">.</span><span class="token function">trySetRate</span><span class="token punctuation">(</span>RateType<span class="token punctuation">.</span>PER_CLIENT<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RateIntervalUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每1秒产生5个令牌</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取令牌</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/thread"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RRateLimiter limiter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getRateLimiter</span><span class="token punctuation">(</span><span class="token string">"rateLimiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尝试获取1个令牌</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"成功获取到令牌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"未获取到令牌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 周边 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的搭建与使用</title>
      <link href="/2023/04/17/%E5%91%A8%E8%BE%B9/nginx%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/17/%E5%91%A8%E8%BE%B9/nginx%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>1.先安装gcc-c++编译器</p><pre class=" language-sh"><code class="language-sh">yum install gcc-c++yum install -y openssl openssl-devel</code></pre><p>2.再安装pcre包</p><pre class=" language-sh"><code class="language-sh">yum install -y pcre pcre-devel</code></pre><p>3.再安装zlib包</p><pre class=" language-sh"><code class="language-sh">yum install -y zlib zlib-devel</code></pre><h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>1.在&#x2F;usr&#x2F;local&#x2F;下创建文件nginx文件</p><pre class=" language-sh"><code class="language-sh">mkdir -p /usr/local/nginx</code></pre><p>2.在网上下nginx包上传至Linux（<a href="https://nginx.org/download/%EF%BC%89%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD">https://nginx.org/download/），也可以直接下载</a></p><pre class=" language-sh"><code class="language-sh">wget https://nginx.org/download/nginx-1.19.9.tar.gz</code></pre><p>3.解压并进入nginx目录</p><pre class=" language-sh"><code class="language-sh">tar -zxvf nginx-1.19.9.tar.gzcd nginx-1.19.9</code></pre><p>4.使用nginx默认配置</p><pre class=" language-sh"><code class="language-sh"># m默认./configure#与以下二选一# 如果使用stream标签进行ssh跳转，需要加这个参数./configure --with-stream</code></pre><p>5.编译安装</p><pre class=" language-sh"><code class="language-sh">makemake install</code></pre><p>6.查找安装路径</p><pre class=" language-sh"><code class="language-sh">whereis nginx</code></pre><p>7.进入sbin目录，可以看到有一个可执行文件nginx，直接**.&#x2F;nginx**执行就OK了。</p><pre class=" language-sh"><code class="language-sh">cd sbin./nginx</code></pre><p>9.查看是否启动成功</p><pre class=" language-sh"><code class="language-sh">ps -ef | grep nginx</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre class=" language-sh"><code class="language-sh">cd /usr/local/nginx/sbin/# 重新加载配置./nginx -s reload#启动nginx # 停止./nginx -s quit #:此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s stop #:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</code></pre><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="配置ssh跳转"><a href="#配置ssh跳转" class="headerlink" title="配置ssh跳转"></a>配置ssh跳转</h2><h3 id="配置mysql跳转"><a href="#配置mysql跳转" class="headerlink" title="配置mysql跳转"></a>配置mysql跳转</h3><ul><li>正常</li></ul><pre class=" language-sh"><code class="language-sh"># 在配置文件最下方新增以下内容，位置与http&#123;&#125;平级# 输入本机的ip3306+用户名和密码 可以访问192.168.220.137:3306的数据库stream &#123;    upstream cloudsocket1 &#123;    hash $remote_addr consistent;    # $binary_remote_addr;    server mysql.sqlpub.com:3306 weight=5 max_fails=3 fail_timeout=30s;#跳转到的服务器    &#125;    server &#123;    listen 13306;#数据库服务器监听端口    proxy_connect_timeout 10s;    proxy_timeout 300s;#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。    proxy_pass cloudsocket1;    &#125;&#125;</code></pre><ul><li>报错 找不到stream</li></ul><pre class=" language-sh"><code class="language-sh"># 安装nginx源curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo# 先安装yum -y install epel-release#应该是缺少modules模块yum -y install nginx-all-modules.noarch然后在用nginx -t就好了[root@k8s-node2 ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful</code></pre><h3 id="配置ssh跳转-1"><a href="#配置ssh跳转-1" class="headerlink" title="配置ssh跳转"></a>配置ssh跳转</h3><pre class=" language-sh"><code class="language-sh"># 在配置文件最下方新增以下内容，位置与http&#123;&#125;平级# 数据本机的ip+122 来登录ssh，可以访问到192.168.1.101:22的服务器，可以用来操作服务器或者传输文件等stream &#123;    upstream cloudsocket2 &#123;    hash $remote_addr consistent;    # $binary_remote_addr;    server 192.168.1.101:22 weight=5 max_fails=3 fail_timeout=30s;#跳转到的服务器    &#125;    server &#123;    listen 122;#连接服务器ssh监听端口    proxy_connect_timeout 10s;    proxy_timeout 300s;#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。    proxy_pass cloudsocket2;    &#125;&#125;</code></pre><h2 id="配置http跳转"><a href="#配置http跳转" class="headerlink" title="配置http跳转"></a>配置http跳转</h2><h3 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h3><pre class=" language-sh"><code class="language-sh">http &#123;    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    #健康监测 如果某台服务器down掉，则在周期内部在跳转到该服务器上，当服务重启后，再次恢复其访问    upstream yuanlai &#123;    #max_fails 检查1次触发，fail_timeout触发周期为60秒        server 192.168.1.100:7009 max_fails=1 fail_timeout=60; #指向的地址        server 192.168.1.105:7009 max_fails=1 fail_timeout=60;#指向的地址    &#125;    server&#123;        listen 7010;#监听的端口        server_name localhost;#监听的本地地址        location / &#123;            #访问上面定义的名称            proxy_pass http://yuanlai;            #设置页面响应超时时间3秒            proxy_read_timeout 3;            proxy_send_timeout 3;            proxy_connect_timeout 3;        &#125;    &#125;&#125;</code></pre><h3 id="转发说明"><a href="#转发说明" class="headerlink" title="转发说明"></a>转发说明</h3><ul><li><p>proxy_pass</p><p>假设请求：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost/online/wxapi/test/loginSwitch</code></pre></li><li><p>proxy_pass结尾有&#x2F;</p><pre class=" language-conf"><code class="language-conf">location /online/wxapi/ &#123;        proxy_pass http://localhost:8080/;        proxy_set_header X-Real-IP $remote_addr;&#125;</code></pre><p>代理后的实际地址：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:8080/test/loginSwitch</code></pre><ul><li>proxy_pass结尾没有&#x2F;</li></ul><pre class=" language-conf"><code class="language-conf">location /online/wxapi/ &#123;        proxy_pass http://localhost:8080;        proxy_set_header X-Real-IP $remote_addr;&#125;</code></pre><p>代理后的实际地址：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:8080/test/loginSwitch</code></pre><ul><li>proxy_pass结尾有&#x2F;web</li></ul><pre class=" language-conf"><code class="language-conf">location /online/wxapi/ &#123;        proxy_pass http://localhost:8080/web;        proxy_set_header X-Real-IP $remote_addr;&#125;</code></pre><p>代理后的实际地址：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:8080/webtest/loginSwitch</code></pre><ul><li>proxy_pass结尾有&#x2F;web&#x2F;</li></ul><pre class=" language-conf"><code class="language-conf">location /online/wxapi/ &#123;        proxy_pass http://localhost:8080/web/;        proxy_set_header X-Real-IP $remote_addr;&#125;</code></pre><p>代理后的实际地址：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:8080/test/loginSwitch</code></pre><p>proxy_pass结尾有&#x2F;</p><pre class=" language-conf"><code class="language-conf">location /online/wxapi/ &#123;        proxy_pass http://localhost:8080/;        proxy_set_header X-Real-IP $remote_addr;&#125;</code></pre><p>代理后的实际地址：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//localhost:8080/web/test/loginSwitch</code></pre></li></ul><h2 id="指向本地文件"><a href="#指向本地文件" class="headerlink" title="指向本地文件"></a>指向本地文件</h2><pre class=" language-sh"><code class="language-sh">worker_processes  1;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    server &#123;        listen       9999;        server_name  localhost;                location / &#123;            # 自动构建索引            autoindex on;             root  D:\server;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;    &#125;&#125;</code></pre><h2 id="部署vue项目"><a href="#部署vue项目" class="headerlink" title="部署vue项目"></a>部署vue项目</h2><h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><p>添加一个server</p><pre class=" language-conf"><code class="language-conf">server &#123;    listen       8099;                       #监听端口设置，也就是你vue项目的端口    server_name  localhost;           location / &#123;      root   /root/project/opmApp/vue/dist;       #前端dist文件夹存放路径      try_files $uri $uri/ /index.html;           #解决页面刷新报404错误    &#125;    error_page 404 /404.html;        location = /40x.html &#123;    &#125;    error_page 500 502 503 504 /50x.html;        location = /50x.html &#123;    &#125;&#125;</code></pre><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><pre><code>/usr/local/nginx/sbin/nginx -s reload</code></pre><h2 id="location配置说明"><a href="#location配置说明" class="headerlink" title="location配置说明"></a>location配置说明</h2><pre class=" language-sh"><code class="language-sh">= 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。~ 为区分大小写匹配(可用正则表达式)!~为区分大小写不匹配~* 为不区分大小写匹配(可用正则表达式)!~*为不区分大小写不匹配^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式。location = / &#123;# 只匹配 / 查询。&#125;location / &#123;# 匹配任何查询，因为所有请求都已 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配。&#125;location ^~ /p_w_picpaths/ &#123;# 匹配任何已 /p_w_picpaths/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。&#125;location ~*.(gif|jpg|jpeg)$ &#123;# 匹配任何已 gif、jpg 或 jpeg 结尾的请求。&#125;location ~*.(gif|jpg|swf)$ &#123;    valid_referers none blocked start.igrow.cn sta.igrow.cn;    if ($invalid_referer) &#123;    #防盗链        rewrite ^/ http://$host/logo.png;    &#125;&#125;</code></pre><p>http转发配置说明</p><h1 id="高可用（集群）"><a href="#高可用（集群）" class="headerlink" title="高可用（集群）"></a>高可用（集群）</h1><p>两台服务器都装nginx和keepalived</p><h2 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h2><p>keepalived 用来配置 虚拟ip</p><pre class=" language-sh"><code class="language-sh"># 安装yum install keepalived -y# 查看是否安装完毕rpm -q -q keepalived</code></pre><h2 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h2><p>做nginx高可用主要是修改这个配置文件，nginx中的配置文件不需要修改</p><pre class=" language-sh"><code class="language-sh">cd /etc/keepalivedvim keepalived.conf</code></pre><h3 id="修改主节点配置"><a href="#修改主节点配置" class="headerlink" title="修改主节点配置"></a>修改主节点配置</h3><pre class=" language-conf"><code class="language-conf">global_defs &#123; notification_email &#123; acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.130.155 smtp_connect_timeout 30 router_id LVS_DEVEL script_user root enable_script_security &#125;vrrp_script chk_http_port &#123;    #脚本要放到这个位置 script "/usr/local/src/nginx_check.sh" interval 2 #（检测脚本执行的间隔） weight 2&#125;vrrp_instance VI_1 &#123; state MASTER # 备份服务器上将 MASTER 改为 BACKUP interface ens33 //网卡 virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同 priority 100 # 主、备机取不同的优先级，主机值较大，备份机值较小 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.130.1 // VRRP H 虚拟地址 &#125;&#125;</code></pre><h3 id="修改从节点配置"><a href="#修改从节点配置" class="headerlink" title="修改从节点配置"></a>修改从节点配置</h3><pre class=" language-conf"><code class="language-conf">global_defs &#123; notification_email &#123; acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.130.122 smtp_connect_timeout 30 router_id LVS_DEVEL script_user root enable_script_security &#125;vrrp_script chk_http_port &#123;    #脚本要放到这个位置 script "/usr/local/src/nginx_check.sh" interval 2 #（检测脚本执行的间隔） weight 2&#125;vrrp_instance VI_1 &#123; state BACKUP # 备份服务器上将 MASTER 改为 BACKUP interface ens33 //网卡 virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同 priority 90 # 主、备机取不同的优先级，主机值较大，备份机值较小 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.130.1 // VRRP H 虚拟地址 &#125; &#125;</code></pre><h3 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h3><pre class=" language-sh"><code class="language-sh">vim /usr/local/src/nginx_check.sh</code></pre><pre class=" language-sh"><code class="language-sh">#!/bin/bashA=`ps -C nginx –no-header |wc -l`if [ $A -eq 0 ];then    # nginx的启动脚本的位置 /usr/local/nginx/sbin/nginx sleep 2 if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then killall keepalived fifi</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动两台服务器上的nginx和keepalive</p><h3 id="启动nginx和keepalive"><a href="#启动nginx和keepalive" class="headerlink" title="启动nginx和keepalive"></a>启动nginx和keepalive</h3><pre class=" language-sh"><code class="language-sh">#启动nginx/usr/local/nginx/sbin/nginx#启动keepalivedsystemctl start keepalived.service#查看日志tail -f /var/log/messages#查看是否启动ps -ef  | grep keepalived</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-http"><code class="language-http"># 访问<span class="token header-name keyword">http:</span>//192.168.130.1/</code></pre><p>关闭主节点的nginx和keepaliced后仍然可以访问</p><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><pre class=" language-sh"><code class="language-sh">start nginxnginx.exe -s stop#查彻底关闭 taskkill /f /t /im nginx.exe</code></pre>]]></content>
      
      
      <categories>
          
          <category> 周边 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cloudreve搭建私人网盘</title>
      <link href="/2023/04/17/%E5%91%A8%E8%BE%B9/%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98-Cloudreve/"/>
      <url>/2023/04/17/%E5%91%A8%E8%BE%B9/%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98-Cloudreve/</url>
      
        <content type="html"><![CDATA[<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>centos7</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//docs.cloudreve.org/</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>创建文件夹</li></ul><pre class=" language-sh"><code class="language-sh">mkdir /usr/local/cloudrevecd /usr/local/cloudreve</code></pre><ul><li>下载</li></ul><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//github.com/cloudreve/Cloudreve/releases</code></pre><ul><li>解压</li></ul><pre class=" language-sh"><code class="language-sh">tar -zxvf cloudreve_3.7.1_linux_amd64.tar.gz</code></pre><ul><li>运行(看管理员账号密码)</li></ul><pre class=" language-sh"><code class="language-sh"># 赋予执行权限chmod +x ./cloudreve# 启动 Cloudreve（看管理员账号密码）./cloudreve</code></pre><ul><li>重置管理员密码</li></ul><pre class=" language-sh"><code class="language-sh">./cloudreve --database-script ResetAdminPassword# 默认账号admin@cloudreve.org# 密码随机字符</code></pre><ul><li>访问</li></ul><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">localhost:</span>5212</code></pre><ul><li><p>&#x3D;&#x3D;注&#x3D;&#x3D;</p><p>必须登录一下管理员，修改下载链接，否则无法下载</p></li></ul><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><ul><li>编辑配置文件</li></ul><pre class=" language-sh"><code class="language-sh"># 编辑配置文件vim /usr/lib/systemd/system/cloudreve.service</code></pre><pre class=" language-properties"><code class="language-properties">[Unit]<span class="token attr-name">Description</span><span class="token punctuation">=</span><span class="token attr-value">Cloudreve</span><span class="token attr-name">Documentation</span><span class="token punctuation">=</span><span class="token attr-value">https://docs.cloudreve.org</span><span class="token attr-name">After</span><span class="token punctuation">=</span><span class="token attr-value">network.target</span><span class="token attr-name">After</span><span class="token punctuation">=</span><span class="token attr-value">mysqld.service</span><span class="token attr-name">Wants</span><span class="token punctuation">=</span><span class="token attr-value">network.target</span>[Service]<span class="token attr-name">WorkingDirectory</span><span class="token punctuation">=</span><span class="token attr-value">/PATH_TO_CLOUDREVE</span><span class="token attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token attr-value">/PATH_TO_CLOUDREVE/cloudreve</span><span class="token attr-name">Restart</span><span class="token punctuation">=</span><span class="token attr-value">on-abnormal</span><span class="token attr-name">RestartSec</span><span class="token punctuation">=</span><span class="token attr-value">5s</span><span class="token attr-name">KillMode</span><span class="token punctuation">=</span><span class="token attr-value">mixed</span><span class="token attr-name">StandardOutput</span><span class="token punctuation">=</span><span class="token attr-value">null</span><span class="token attr-name">StandardError</span><span class="token punctuation">=</span><span class="token attr-value">syslog</span>[Install]<span class="token attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token attr-value">multi-user.target</span></code></pre><ul><li>常用命令</li></ul><pre class=" language-sh"><code class="language-sh"># 更新配置systemctl daemon-reload# 启动服务systemctl start cloudreve# 设置开机启动systemctl enable cloudreve# 启动服务systemctl start cloudreve# 停止服务systemctl stop cloudreve# 重启服务systemctl restart cloudreve# 查看状态systemctl status cloudreve</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="更改默认空间"><a href="#更改默认空间" class="headerlink" title="更改默认空间"></a>更改默认空间</h3><p>点击我的头像-&gt;管理面板-&gt;用户组</p><h2 id="windiws-略"><a href="#windiws-略" class="headerlink" title="windiws(略)"></a>windiws(略)</h2>]]></content>
      
      
      <categories>
          
          <category> 周边 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Cloudreve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2023/04/14/%E5%90%8E%E7%AB%AF/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/04/14/%E5%90%8E%E7%AB%AF/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="代理模式的作用"><a href="#代理模式的作用" class="headerlink" title="代理模式的作用"></a>代理模式的作用</h2><p>我发现学习设计模式遇到的一个最大的困惑就是，自己搞不明白费那么大劲，增加那么多的编码<br>意义到底时什么。<br>所以在学习任何一种设计模式的时候，应该最先了解该设计模式到底解决了什么问题。<br>代理模式的作用是什么呢？</p><p>比如说我的同事走了，把手中的代码全部交接给我了，其中有个方法需要进行修改，<br>然后离开的同事代码写了一大坨没有任何中文注释，嵌套继承用了一大堆，别说改<br>了就是读明白都感觉困难。这时候怎么办呢？</p><p>这时候我们的代理模式就可以华丽登场了。我们可以在不改变源代码的情况下，对原来的<br>方法进行修改和增强，具体请看如下情况</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>被代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被代理对象方法执行……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ITeacherDao target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TeacherDaoProxy</span><span class="token punctuation">(</span>ITeacherDao target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行一些方法……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再执行一些方法……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TeacherDao teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherDaoProxy teacherDaoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherDaoProxy<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>执行结果</li></ul><pre class=" language-txt"><code class="language-txt">执行一些方法……被代理对象方法执行……再执行一些方法……</code></pre><ul><li>优缺点</li></ul><p>优点：在不改变被代理类代码的情况下，对被代理类的方法进行了增强。</p><p>缺点：因为代理和被代理类都要实现共同的接口，当接口发生改变时，接口的实现类都要改变。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>被代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被代理对象方法执行……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>代理工厂</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 维护一个目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器对target初始化</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给目标对象生成代理对象</span>    <span class="token comment" spellcheck="true">/*    public static Object newProxyInstance(ClassLoader loader,                                          Class&lt;?>[] interfaces,                                          InvocationHandler h)  ClassLoader:指定当前目标对象使用的加载器，获取加载器的方法固定  Class&lt;?>[]：目标对象实现的接口类型，使用泛型的方式确认类型  InvocationHandler：时间处理，执行目标对象的方法时，会执行处理器方法，会把当前执行的目标对象方法，作为一个参数传入     */</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jdk 代理开始，执行其他方法……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 反射机制调用目标对象的方法</span>                Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jdk 代理结束，执行其他方法……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建目标对象</span>        ITeacherDao target <span class="token operator">=</span> <span class="token punctuation">(</span>ITeacherDao<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ITeacherDao proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>ITeacherDao<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内存中生成了代理对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>返回结果</li></ul><pre class=" language-txt"><code class="language-txt">jdk 代理开始，执行其他方法……被代理对象方法执行……jdk 代理结束，执行其他方法……</code></pre><ul><li>优缺点</li></ul><p>需要代理什么什么对象，直接在工厂取就可以，但是增强的方法不能随着被代理的对象的改变而改变</p><h2 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h2><ul><li>没有实现任何接口也可以被代理</li><li>子类代理，在内存中实现被代理的子类，然后实现动态代理</li><li>需要下载包，springAop的实现就用到了cglib包</li><li>如果目标接口需要实现一个接口，就用jdk，如果目标对象不需要实现接口，则用cglib</li><li>通过字节码生成新的类</li></ul><h2 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h2><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.bilibili.com/video/BV1G4411c7N4?p=94</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
